workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

variables:
  IMAGE_NAME_ANSIBLE: $CI_REGISTRY_IMAGE/ansible  
  IMAGE_TAG_ANSIBLE: "1.0"

stages:
  - build 
  - linting
  - create_digital-twin
  - configure_digital-twin
  - test_digital-twin
  - configure_production
  - test_production
  - delete_digital-twin

build_image:
  stage: build
  tags:
    - local-runner
  script:
    - docker build -t $IMAGE_NAME_ANSIBLE:$IMAGE_TAG_ANSIBLE .

push_image:
  stage: build
  needs:
    - build_image
  tags:
    - local-runner
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME_ANSIBLE:$IMAGE_TAG_ANSIBLE

ansible_linting:
  stage: linting
  image: $IMAGE_NAME_ANSIBLE:$IMAGE_TAG_ANSIBLE
  needs: 
    - push_image
  tags:
    - docker-runner
  before_script:
    - cd ansible
  script: 
    - ansible-lint --profile=min *.yaml


create_digital-twin:
  stage: create_digital-twin
  image: $IMAGE_NAME_ANSIBLE:$IMAGE_TAG_ANSIBLE
  needs: 
    - ansible_linting
  environment: CML
  tags:
    - docker-runner
  before_script:
    - cd ansible
    - unset http_proxy 
    - unset http_proxys
  script: 
    - ansible-playbook 00_create_CML_lab.yaml

configure_digital-twin:
  stage: create_digital-twin
  image: $IMAGE_NAME_ANSIBLE:$IMAGE_TAG_ANSIBLE
  needs: 
    - create_digital-twin
  environment: CML
  tags:
    - docker-runner
  before_script:
    - cd ansible
  script: 
    - ansible-playbook 01_config_devices.yaml -i inventory_digital-twin --extra-vars "host_var=digital_twin"

testcases_digital-twin:
  stage: test_digital-twin
  image: $IMAGE_NAME_ANSIBLE:$IMAGE_TAG_ANSIBLE
  needs:
    - configure_digital-twin
  environment: CML
  tags:
    - docker-runner
  before_script:
    - cd robot_framework
    - mkdir reports_digital-twin
  script:
    - robot --outputdir reports_digital-twin/ testcases_digital-twin.robot
  artifacts:
    untracked: false
    when: always
    expire_in: "1 days"
    paths:
      - "$CI_BUILDS_DIR/$CI_PROJECT_PATH/robot_framework/reports_digital-twin/log.html"
      - "$CI_BUILDS_DIR/$CI_PROJECT_PATH/robot_framework/reports_digital-twin/report.html"

configure_production:
  stage: configure_production
  image: $IMAGE_NAME_ANSIBLE:$IMAGE_TAG_ANSIBLE
  needs: 
    - testcases_digital-twin
  environment: CML
  tags:
    - docker-runner
  before_script:
    - cd ansible
  script: 
    - ansible-playbook 01_config_devices.yaml -i inventory_production --extra-vars "host_var=production"

testcases_production:
  stage: test_production
  image: $IMAGE_NAME_ANSIBLE:$IMAGE_TAG_ANSIBLE
  needs:
    - configure_production
  environment: CML
  tags:
    - docker-runner
  before_script:
    - cd robot_framework
    - mkdir reports_production
  script:
    - robot --outputdir reports_production/ testcases_production.robot
  artifacts:
    untracked: false
    when: always
    expire_in: "1 days"
    paths:
      - "$CI_BUILDS_DIR/$CI_PROJECT_PATH/robot_framework/reports_production/log.html"
      - "$CI_BUILDS_DIR/$CI_PROJECT_PATH/robot_framework/reports_production/report.html"

delete_digital-twin:
  stage: delete_digital-twin
  image: $IMAGE_NAME_ANSIBLE:$IMAGE_TAG_ANSIBLE
  needs: 
    - testcases_production
  environment: CML
  tags:
    - docker-runner
  before_script:
    - cd ansible
    - unset http_proxy 
    - unset http_proxys
  script: 
    - ansible-playbook 02_delete_CML_lab.yaml